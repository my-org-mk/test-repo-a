name: Dynamic Task Workflow

on:
  workflow_dispatch:
    inputs:
      task_names:
        description: 'Comma-separated list of task names (e.g., task1, task2, task3)'
        required: true
      batch_index:
        description: 'Optional batch index for splitting tasks (default: 0)'
        default: '0'
        required: false

jobs:
  split-and-dispatch:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      should_dispatch: ${{ steps.generate-matrix.outputs.should_dispatch }}
      next_workflow_run_id: ${{ steps.dispatch-next-batch.outputs.workflow_run_id }}
    steps:
      - name: Generate task matrix and check for additional batches
        id: generate-matrix
        run: |
          TASKS_INPUT=$(echo "${{ github.event.inputs.task_names }}" | tr -d '[:space:]')
          IFS=',' read -r -a tasks <<< "$TASKS_INPUT"
          MAX_TASKS=2  # Changed to 2 as per your test
          TOTAL_TASKS=${#tasks[@]}
          BATCH_INDEX=${{ github.event.inputs.batch_index }}
          START=$((BATCH_INDEX * MAX_TASKS))
          END=$((START + MAX_TASKS))

          if [ $END -gt $TOTAL_TASKS ]; then
            END=$TOTAL_TASKS
          fi

          BATCH_TASKS=("${tasks[@]:$START:$MAX_TASKS}")
          MATRIX_JSON=$(printf '%s\n' "${BATCH_TASKS[@]}" | jq -R . | jq -s '{ "task": . }' -c)
          echo "Generated matrix: $MATRIX_JSON"

          cat <<EOF >> $GITHUB_OUTPUT
          matrix<<DELIMITER
          $MATRIX_JSON
          DELIMITER
          should_dispatch=$( [ $END -lt $TOTAL_TASKS ] && echo "true" || echo "false" )
          EOF
        shell: bash

      - name: Dispatch next batch and get run ID
        id: dispatch-next-batch
        if: steps.generate-matrix.outputs.should_dispatch == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEXT_BATCH=$(( ${{ github.event.inputs.batch_index }} + 1 ))
          # Dispatch the workflow without --json
          gh workflow run "${{ github.workflow }}" \
            -f task_names="${{ github.event.inputs.task_names }}" \
            -f batch_index="$NEXT_BATCH" \
            --ref "${{ github.ref }}"
          
          # Wait briefly and get the latest run ID
          sleep 2s  # Give GitHub a moment to register the run
          RUN_ID=$(gh run list \
            --workflow="${{ github.workflow }}" \
            --branch="${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId | jq -r '.[0].databaseId')
          echo "Dispatched workflow run ID: $RUN_ID"
          echo "workflow_run_id=$RUN_ID" >> $GITHUB_OUTPUT
        shell: bash

      - name: Wait for dispatched workflow to complete
        if: steps.generate-matrix.outputs.should_dispatch == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUN_ID=${{ steps.dispatch-next-batch.outputs.workflow_run_id }}
          echo "Waiting for workflow run $RUN_ID to complete..."
          while true; do
            STATUS=$(gh run view "$RUN_ID" --repo "${{ github.repository }}" --json conclusion,status | jq -r '.status')
            CONCLUSION=$(gh run view "$RUN_ID" --repo "${{ github.repository }}" --json conclusion,status | jq -r '.conclusion')
            echo "Current status: $STATUS, conclusion: $CONCLUSION"
            if [ "$STATUS" = "completed" ]; then
              if [ "$CONCLUSION" = "success" ]; then
                echo "Dispatched workflow completed successfully."
                exit 0
              else
                echo "Dispatched workflow failed with conclusion: $CONCLUSION"
                exit 1
              fi
            fi
            sleep 10s
          done
        shell: bash

  process-tasks:
    needs: split-and-dispatch
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.split-and-dispatch.outputs.matrix) }}
    steps:
      - name: Print task name
        run: |
          echo "Processing task: ${{ matrix.task }}"
          sleep 1s
        shell: bash
