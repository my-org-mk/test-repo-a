name: Inner Task Workflow

on:
  workflow_call:
    inputs:
      batch_tasks:
        description: 'Comma-separated list of tasks for this batch'
        required: true
        type: string

jobs:
  process-batch:
    runs-on: ubuntu-latest
    steps:
      - name: Generate task matrix
        id: generate-matrix
        run: |
          # Split batch tasks into array
          IFS=',' read -r -a tasks <<< "${{ inputs.batch_tasks }}"
          MATRIX_JSON=$(printf '%s\n' "${tasks[@]}" | jq -R . | jq -s '{ "task": . }' -c)
          echo "Generated task matrix: $MATRIX_JSON"
          
          # Output matrix for strategy
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
        shell: bash

    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}

  execute-tasks:
    needs: process-batch
    runs-on: ubuntu-latest
    #strategy:
    #  matrix: ${{ fromJson(needs.process-batch.outputs.matrix) }}
    #  max-parallel: 2
    steps:
      #- name: Process Task
      #  run: |
      #    echo "Processing task: ${{ matrix.task }}"
      #  shell: bash
      - name: Process Each Task
        run: |
          echo "::group::Taking tasks"
          echo "Variable setting"
          TASKS=$(echo '${{ needs.process-batch.outputs.matrix }}' | jq -r '.task[]')          
          echo "::endgroup::"
          for task in $TASKS; do
            echo "::group::Processing task: $task"
            # echo "Processing task: $task"
            echo "Task: $task"
            echo "::endgroup::"
          done          
#          for task in "${{ fromJson(steps.generate-matrix.outputs.matrix).task }}"; do
#            echo "Processing task: $task"            
#         done
        shell: bash
      # Add more steps here as needed
